(function(undefined){
    var $ = window.$;

    if (typeof $ == "undefined") {
        console.error("Need jquery support");
        return;
    }

    function GameConfig(params) {
        this.gameBoxObj = null;
        this.boxcolors = ["#3387bf", "#cb2063", "#434752"];
        this.boxcss = "box";
        this.boxruncss = "new_more";
        this.bgcss = "bg";
        this.bgruncss = "more";
        this.colorcss = "color";
        this.boxNum = 9;
        this.time = 90;
        this.timeObj = null;
        this.succees = null;
        this.fail = null;
        this.runCheck = null;
        this.debug = false;
        this.showTime = 0;
        if (typeof params == "string") {
            this.gameBoxObj = $(params);
        } else if (typeof params == "object") {
            this.gameBoxObj = $(params.gameBoxObj);
            if (typeof params.boxcolors == "object") {
                this.boxcolors = params.boxcolors;
            }
            if (typeof params.boxcss == "string") {
                this.boxcss = params.boxcss;
            }
            if (typeof params.boxruncss == "string") {
                this.boxruncss = params.boxruncss;
            }
            if (typeof params.bgcss == "string") {
                this.bgcss = params.bgcss;
            }
            if (typeof params.bgruncss == "string") {
                this.bgruncss = params.bgruncss;
            }
            if (typeof params.colorcss == "string") {
                this.colorcss = params.colorcss;
            }
            if (typeof params.boxNum == "number") {
                this.boxNum = params.boxNum;
            }
            if (typeof params.time == "number") {
                this.time = params.time;
            }
            if (typeof params.timeObj == "string") {
                this.timeObj = $(params.timeObj);
            }
            if (typeof params.succees == "function") {
                this.succees = params.succees;
            }
            if (typeof params.fail == "function") {
                this.fail = params.fail;
            }
            if (typeof params.runCheck == "function") {
                this.runCheck = params.runCheck;
            }
            if ('debug' in params) {
                this.debug = !!params.debug;
            }
            if (typeof params.showTime == "number") {
                this.showTime = params.showTime;
            }
        }
    }

    function GameData() {
        this.isRun = false;
        this.usedTime = 0;
        this.remainingTime = 0;
        this.succees = 0;
    }

    function GameRuningData() {
        this.inited = false;
        this.canPlay = false;
        this.boxObj = null;
        this.boxs = {};
        this.bgObj = null;
        this.bgs = {};
        this.colorObj = null;
        this.colors = {};
        this.runObj = null;
        this.intervalNum = null;
        this.touchEndX = null;
        this.touchEndY = null;
        this.prevTime = 0;
        this.isChecked = {};
        this.showTime = 0;
        this.showPrevTime = 0;
        this.showTimeIntervalNum = null;
        this.initing = false;
    }

    function Game(params) {
        this.config = new GameConfig(params);
        this.data = new GameData();
        this.runingData = new GameRuningData();
        if (this.config.debug) {
            console.log(this);
        }
    }

    Game.prototype.init = function(){
        if (this.data.isRun || this.runingData.initing) {
            return;
        }

        this.runingData.inited = false;

        this.runingData.initing = true;

        if (this.config.gameBoxObj) {
            this.config.gameBoxObj.empty();
        }

        this.createBoxs();

        for (var i = 0; i < this.config.boxNum; i++) {
            this.runingData.isChecked[i] = false;
        }

        //this.runingData.canPlay = false;

        this.runingData.inited = true;

        this.runingData.initing = false;
    }

    Game.prototype.start = function(){
        if (!this.runingData.inited) {
            console.error("game must be init");
            return;
        }

        if (this.config.showTime > 0) {
            this.runingData.showTime = 0;
            var self = this;

            this.runingData.showTimeIntervalNum = setInterval(function(){
                var nowTime = new Date().getTime();

                if (nowTime + 10 <= self.runingData.showPrevTime) {
                    return;
                }

                self.runingData.showPrevTime = nowTime;
                self.runingData.showTime += 10;

                if (self.runingData.showTime >= self.config.showTime) {
                    clearInterval(self.runingData.showTimeIntervalNum);
                    self.runingData.showTimeIntervalNum = null;

                    self.startRemainingTime();
                }
            }, 10);
        } else {
            this.startRemainingTime();
        }
    }

    Game.prototype.startRemainingTime = function() {
        this.runingData.canPlay = true;

        this.restartData();

        var self = this;

        $(document).off("touchstart, touchmove, touchend", "colorBox").on("touchmove", "colorBox", function(ev){
            self.runing(ev);
            self.createRunObj($(this));
        }).on("touchend", "colorBox", function(ev){
            self.check();
        });

        if (typeof this.runingData.intervalNum == "number") {
            return;
        }

        this.runingData.intervalNum = setInterval(function(){
            if (!self.data.isRun || !self.runingData.canPlay) {
                return;
            }

            var nowTime = new Date().getTime();

            if (nowTime - 1 < self.runingData.prevTime) {
                return;
            }

            self.data.remainingTime -= 0.01;
            self.data.usedTime += 0.01;

            if (self.config.timeObj) {
                self.config.timeObj.html(self.data.remainingTime.toFixed(2));
            }

            self.runingData.prevTime = nowTime;

            self.endCheck();
        }, 10);
    }

    Game.prototype.endRemainingTime = function(){
        if (typeof this.runingData.intervalNum == "number") {
            clearInterval(this.runingData.intervalNum);

            this.runingData.intervalNum = null;
        }
    }

    Game.prototype.restartData = function(){
        this.data = new GameData();

        this.data.remainingTime = this.config.time;
        this.data.isRun = true;
    }

    Game.prototype.restart = function(){
        this.data.isRun = false;
        this.init();
        this.start();
    }

    Game.prototype.createBoxs = function(){
        this.createGameBox();
        this.createBgBox();
        this.createColorBox();
    }

    Game.prototype.createGameBox = function() {
        var uuid = this.uuid();

        var gameBoxHtml = "<div id=\"J_" + uuid + "\" class=" + this.config.boxcss + "></div>";

        if (this.config.debug) {
            console.log("create game box html -> " + gameBoxHtml);
        }

        this.config.gameBoxObj.append(gameBoxHtml);
        this.runingData.boxObj = $("#J_" + uuid);

        for(var i = 0; i < this.config.boxNum; i++) {
            var _uuid = this.uuid();
            this.runingData.boxObj.append("<gamebox id=\"J_" + _uuid + "\" ></gamebox>");
            this.runingData.boxs[i] = $("#J_" + _uuid);
            this.runingData.boxs[i].css(this.getRandomColor());
        }
    }

    Game.prototype.createBgBox = function() {
        var uuid = this.uuid();

        var gameBgHtml = "<div id=\"J_" + uuid + "\" class=" + this.config.bgcss + "></div>";

        if (this.config.debug) {
            console.log("add game bg html -> " + gameBgHtml);
        }

        this.config.gameBoxObj.append(gameBgHtml);
        this.runingData.bgObj = $("#J_" + uuid);

        for(var i = 0; i < this.config.boxNum; i++) {
            var _uuid = this.uuid();
            this.runingData.bgObj.append("<bgBox id=\"J_" + _uuid + "\" ></bgBox>");
            this.runingData.bgs[i] = $("#J_" + _uuid);
        }
    }

    Game.prototype.createColorBox = function() {
        var uuid = this.uuid();

        var gameColorHtml = "<div id=\"J_" + uuid + "\" class=\"" + this.config.colorcss + "\"></div>";

        if (this.config.debug) {
            console.log("add game color html -> " + gameColorHtml);
        }

        this.config.gameBoxObj.append(gameColorHtml);
        this.runingData.colorObj = $("#J_" + uuid);

        var r = parseInt(Math.random() * this.config.boxcolors.length);

        for(var i = r; i < this.config.boxcolors.length + r; i++) {
            this.createColorSubBox(i);
        }
    }

    Game.prototype.createColorSubBox = function(i) {
        var uuid = this.uuid();
        this.runingData.colorObj.append("<colorBox id=\"J_" + uuid + "\" data-colorId=\"" + i + "\"></colorBox>");
        this.runingData.colors[i] = $("#J_" + uuid);
        this.runingData.colors[i].css(this.createColor(i));

        return this.runingData.colors[i];
    }

    Game.prototype.createColor = function(i) {
        var color = this.config.boxcolors[i % this.config.boxcolors.length];

        if (typeof color == "object") {
            return {
                "background-color" : "rgb(" + color.r + "," + color.g + "," + color.b + ")",
            };
        } else {
            return {
                "background-color" : color,
            };
        }
    }

    Game.prototype.getRandomColor = function() {
        return this.createColor(parseInt(Math.random() * this.config.boxcolors.length));
    }

    Game.prototype.runing = function(ev) {
        var touch = ev.originalEvent.changedTouches[0];
        this.runingData.touchEndX = touch.pageX;
        this.runingData.touchEndY = touch.pageY;

        var runObj = this.runingData.runObj;

        if (!runObj) {
            return;
        }

        var width = runObj.width();
        var height = runObj.height();

        runObj.css({
            left: this.runingData.touchEndX - width / 2 + 'px',
            top: this.runingData.touchEndY - height / 2 + 'px'
        });
    }

    Game.prototype.createRunObj = function(obj) {
        if (this.config.debug) {
            console.log("now run -> " + (this.runingData.runObj ? this.runingData.runObj.attr("id") : "undefined"));
        }

        if (this.runingData.runObj) {
            return;
        }

        if (this.config.debug) {
            console.log("start create run");
        }

        var uuid = this.uuid();

        var runObjHtml = "<run id=\"J_" + uuid + "\"></run>";

        this.config.gameBoxObj.append(runObjHtml);

        var runObj = $("#J_" + uuid);
        runObj.css({
            left: obj.offset().left,
            top: obj.offset().top,
            "background-color" : obj.css("background-color")
        });

        var self = this;

        $(document).on("touchmove", "#J_" + uuid, function(ev){
            console.log("run -> " + runObj.attr("id") + " -> touchmove");
            self.runing(ev);
        }).on("touchend", "#J_" + uuid, function(ev){
            console.log("run -> " + runObj.attr("id") + " -> touchend");
            self.check();
        });

        if (this.config.debug) {
            console.log("create run -> " + runObj.attr("id"));
        }

        this.runingData.runObj = runObj;
    }

    Game.prototype.check = function() {
        var runObj = this.runingData.runObj;

        if (!runObj) {
            return;
        }

        var nColor = runObj.css("background-color");

        var nLeft = runObj.offset().left;
        var nTop = runObj.offset().top;

        var touchEndX = this.runingData.touchEndX;
        var touchEndY = this.runingData.touchEndY;

        var _left = this.runingData.bgObj.offset().left;
        var _top = this.runingData.bgObj.offset().top;
        var _width = this.runingData.bgObj.width();
        var _height = this.runingData.bgObj.height();

        if (!(touchEndX > _left && touchEndX < _left + _width && touchEndY > _top && touchEndY < _top + _height)) {
            if (runObj) {
                runObj.remove();
                this.runingData.runObj = null;
            }
            return;
        }

        var hasLike = false;

        var hasHit = false;

        for(var i = 0; i < this.config.boxNum; i++) {
            var box = this.runingData.boxs[i];

            var left = box.offset().left;
            var top = box.offset().top;
            var width = box.width();
            var height = box.height();
            var color = box.css("background-color");

            if (this.config.debug) {
                console.log("i : " + i  + ", left : " + left + ", top : " + top);
            }

            if (touchEndX > left && touchEndX < left + width && touchEndY > top && touchEndY < top + height) {
                hasHit = true;
                if (this.config.debug) {
                    console.log("坐标相同 -> " + i);
                    console.log(this.runingData.isChecked[i]);
                }

                if