var canvas = document.getElementById("J_game");

canvas.width = canvas.height = $(canvas).width();

var ctx = canvas.getContext('2d');

function border(ctx, width) {
	var r = width;
	var w = width / 2;
	
	var cw = canvas.width;
	var cy = canvas.height;
	
	var pi = Math.PI / 2;
	ctx.beginPath();
	ctx.lineWidth = width;

	ctx.strokeStyle = "#1062f8";
	
	ctx.arc(r, r, w, pi * 2, pi * 3);
	
	ctx.moveTo(r, w);
	ctx.lineTo(cw - r, w);
	
	ctx.arc(cw - r, r, w, pi * 3, pi * 4);
	
	ctx.moveTo(cw - w, r);
	ctx.lineTo(cw - w, cy - r);

	ctx.arc(cw - r, cy - r, w, pi * 4, pi * 1);
	
	ctx.moveTo(r, cy - w);
	ctx.lineTo(cw - r,cy - w);
	ctx.arc(r, cy - r, w, pi * 1, pi * 2);

	ctx.moveTo(w, r);
	ctx.lineTo(w, cy - r);
	
	ctx.stroke();
	
}

function restart(col, row, color1, color2, success, error) {
	var gws = 0.9;
	var ghs = 0.9;
	var gw = canvas.width * gws;
	var gh = canvas.height * ghs;
	var gx = canvas.width * (1 - gws) / 2;
	var gy = canvas.height * (1 - ghs) / 2;

	ctx.clearRect(0, 0, canvas.width, canvas.height);
	
	var r = 5;
	
	ctx.fillStyle = "#fff";
	ctx.fillRect(r, r, canvas.width - r, canvas.height - r);
	border(ctx, r);
	ctx.stroke();

	var w = gw / col;
	var h = gh / row;

	var iw = w * 0.9;
	var ih = h * 0.9;
	var ml = w * 0.05;
	var mt = h * 0.05;

	var nums = col * row;
	var o = Math.floor(Math.random() * nums);
	var n = 0;

	var boxs = {};

	for (var j = 0; j < row; j++) {
		if (typeof boxs[j] != "object") {
			boxs[j] = {};
		}

		for (var i = 0; i < col; i++) {
			var x = gx + i * w + ml;
			var y = gy + j * h + mt;
			var color = n == o ? color1 : color2;

			boxs[j][i] = {
				row : j + 1,
				col : i + 1,
				x : x,
				y : y,
				ex : x + iw,
				ey : y + ih,
				color : color,
			}

			ctx.fillStyle = color;
			ctx.fillRect(x, y, iw, ih);
			n++;
		}
	}

	$(canvas).off("click").on("click", function(e) {
		var click = getEventPosition(e);

		var find = undefined;

		for ( var r in boxs) {
			if (typeof find == "object") {
				break;
			}
			for ( var c in boxs[r]) {
				var n = boxs[r][c];
				if (n.x <= click.x && click.x <= n.ex && n.y <= click.y && click.y <= n.ey) {
					find = n;
					break;
				}
			}
		}

		if (typeof find == "undefined") {
			return;
		}

		$(canvas).off("click");

		if (find.color == color1) {
			if (typeof success == "function") {
				success();
			}
			return;
		}

		if (typeof error == "function") {
			error();
		}
	})
}

function getEventPosition(ev) {
	var x, y;
	if (ev.layerX || ev.layerX == 0) {
		x = ev.layerX;
		y = ev.layerY;
	} else if (ev.offsetX || ev.offsetX == 0) { // Opera
		x = ev.offsetX;
		y = ev.offsetY;
	}
	return {
		x : x,
		y : y
	};
}

function getLevelConfig(i) {
	var color = getColor(i);
	
	return {
		col : getCols(i),
		row : getCols(i),
		color1 : color.color1,
		color2 : color.color2,
	};
}

function getCols(i) {
	return Math.min(Math.max(i + 1, 2), 6);
}

function getColor(i) {
	
	var c = Math.floor(Math.random() * 360);
	
	var _c = Math.max(40 - i / 2, 1);
	
	var baseColor = [c, Math.floor(Math.random() * 60) + 20, Math.floor(Math.random() * 60) + 20];
	var baseColor2 = [c, baseColor[1] + _c, baseColor[2]];
	
	return {
		color1 : toColor(baseColor),
		color2 : toColor(baseColor2),
	}
}

function toColor(color) {
	return 'hsl(' + color[0] + ', ' + color[1] + '%, ' + color[2] +'%)';
}

var startTime = 0;
var useTime;

function start(level) {
	
	$("#J_game").css({"z-index" : 100});
	
	var config = getLevelConfig(level);
	
	if (typeof config != "object") {
		console.log("game end");
		return;
	}
	
	if (startTime == 0) {
		startTime = new Date().getTime();
	}

	restart(config.col, config.row, config.color1, config.color2, function() {
		level++;
		start(level);
	}, function() {
		useTime = new Date().getTime() - startTime;
		startTime = 0;

		$("#J_game").css({"z-index" : 2});
		$(".J_gameEnd").cs